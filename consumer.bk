/* Copyright 2020 Confluent Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 *
 * Consume messages from Confluent Cloud
 * Using the node-rdkafka client for Apache Kafka
 *
 * =============================================================================
 */

// https://github.com/Blizzard/node-rdkafka
// https://blizzard.github.io/node-rdkafka/current/
const Kafka = require('node-rdkafka');



var topic = "test-topic-aopazo"

function createConsumer(config, onData) {
    const consumer = new Kafka.KafkaConsumer({
        'bootstrap.servers': "pkc-pgq85.us-west-2.aws.confluent.cloud:9092",
        'sasl.username': "YLWHDZM2XQ5KUTNF",
        'sasl.password': "CbVQkZ5/NsbS+KmvZwiZE/G9JJUvvHypm0qLAmmTUhKi/oTvDMCBLB2U2DeUkUcc",
        'security.protocol': "SASL_SSL",
        'sasl.mechanisms': "PLAIN",
        'group.id': 'node-example-rdkafka-group-1'
    }, {
      'auto.offset.reset': 'earliest'
    });
  
    return new Promise((resolve, reject) => {
      consumer
        .on('ready', () => resolve(consumer))
        .on('data', onData);
      console.log("Connecting...");
      consumer.connect();
    });
  }

async function consumerExample() {


    let seen = 0;
    console.log("Creating consumer...");
    const consumer = await createConsumer(null, ({key, value, partition, offset}) => {
        console.log(`Consumed record with key ${key} and value ${value} of partition ${partition} @ offset ${offset}. Updated total count to ${++seen}`);
      });
    
    console.log("Subscribing...");
    consumer.subscribe([topic]);
    
    console.log(`Consuming records from ${topic}`);
    consumer.consume();

    process.on('SIGINT', () => {
        console.log('\nDisconnecting consumer ...');
        consumer.disconnect();
    });
}

consumerExample()
    .catch((err) => {
        console.error(`Something went wrong:\n${err}`);
        process.exit(1);
    });